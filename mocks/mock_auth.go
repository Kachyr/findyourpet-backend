// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Kachyr/findyourpet/findyourpet-backend/pkg/auth (interfaces: AuthServiceI)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/Kachyr/findyourpet/findyourpet-backend/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthServiceI is a mock of AuthServiceI interface.
type MockAuthServiceI struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceIMockRecorder
}

// MockAuthServiceIMockRecorder is the mock recorder for MockAuthServiceI.
type MockAuthServiceIMockRecorder struct {
	mock *MockAuthServiceI
}

// NewMockAuthServiceI creates a new mock instance.
func NewMockAuthServiceI(ctrl *gomock.Controller) *MockAuthServiceI {
	mock := &MockAuthServiceI{ctrl: ctrl}
	mock.recorder = &MockAuthServiceIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthServiceI) EXPECT() *MockAuthServiceIMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockAuthServiceI) Authenticate(arg0 models.User, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockAuthServiceIMockRecorder) Authenticate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockAuthServiceI)(nil).Authenticate), arg0, arg1)
}

// GenerateHashFromPassword mocks base method.
func (m *MockAuthServiceI) GenerateHashFromPassword(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateHashFromPassword", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateHashFromPassword indicates an expected call of GenerateHashFromPassword.
func (mr *MockAuthServiceIMockRecorder) GenerateHashFromPassword(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateHashFromPassword", reflect.TypeOf((*MockAuthServiceI)(nil).GenerateHashFromPassword), arg0)
}
