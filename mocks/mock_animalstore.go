// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Kachyr/findyourpet/findyourpet-backend/internal/store/animals (interfaces: AnimalStoreI)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/Kachyr/findyourpet/findyourpet-backend/pkg/models"
	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockAnimalStoreI is a mock of AnimalStoreI interface.
type MockAnimalStoreI struct {
	ctrl     *gomock.Controller
	recorder *MockAnimalStoreIMockRecorder
}

// MockAnimalStoreIMockRecorder is the mock recorder for MockAnimalStoreI.
type MockAnimalStoreIMockRecorder struct {
	mock *MockAnimalStoreI
}

// NewMockAnimalStoreI creates a new mock instance.
func NewMockAnimalStoreI(ctrl *gomock.Controller) *MockAnimalStoreI {
	mock := &MockAnimalStoreI{ctrl: ctrl}
	mock.recorder = &MockAnimalStoreIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnimalStoreI) EXPECT() *MockAnimalStoreIMockRecorder {
	return m.recorder
}

// AddAnimal mocks base method.
func (m *MockAnimalStoreI) AddAnimal(arg0 *models.Animal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAnimal", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAnimal indicates an expected call of AddAnimal.
func (mr *MockAnimalStoreIMockRecorder) AddAnimal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAnimal", reflect.TypeOf((*MockAnimalStoreI)(nil).AddAnimal), arg0)
}

// AddAnimals mocks base method.
func (m *MockAnimalStoreI) AddAnimals(arg0 []*models.Animal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAnimals", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAnimals indicates an expected call of AddAnimals.
func (mr *MockAnimalStoreIMockRecorder) AddAnimals(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAnimals", reflect.TypeOf((*MockAnimalStoreI)(nil).AddAnimals), arg0)
}

// GetAllAnimals mocks base method.
func (m *MockAnimalStoreI) GetAllAnimals(arg0 *gin.Context) ([]models.Animal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAnimals", arg0)
	ret0, _ := ret[0].([]models.Animal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAnimals indicates an expected call of GetAllAnimals.
func (mr *MockAnimalStoreIMockRecorder) GetAllAnimals(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAnimals", reflect.TypeOf((*MockAnimalStoreI)(nil).GetAllAnimals), arg0)
}

// GetById mocks base method.
func (m *MockAnimalStoreI) GetById(arg0 string) (models.Animal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0)
	ret0, _ := ret[0].(models.Animal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockAnimalStoreIMockRecorder) GetById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockAnimalStoreI)(nil).GetById), arg0)
}

// GetLikedAnimals mocks base method.
func (m *MockAnimalStoreI) GetLikedAnimals(arg0 uuid.UUID, arg1 *gin.Context) ([]models.Animal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLikedAnimals", arg0, arg1)
	ret0, _ := ret[0].([]models.Animal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLikedAnimals indicates an expected call of GetLikedAnimals.
func (mr *MockAnimalStoreIMockRecorder) GetLikedAnimals(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLikedAnimals", reflect.TypeOf((*MockAnimalStoreI)(nil).GetLikedAnimals), arg0, arg1)
}

// GetNotSeenAnimals mocks base method.
func (m *MockAnimalStoreI) GetNotSeenAnimals(arg0 uuid.UUID, arg1 *gin.Context) ([]models.Animal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotSeenAnimals", arg0, arg1)
	ret0, _ := ret[0].([]models.Animal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotSeenAnimals indicates an expected call of GetNotSeenAnimals.
func (mr *MockAnimalStoreIMockRecorder) GetNotSeenAnimals(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotSeenAnimals", reflect.TypeOf((*MockAnimalStoreI)(nil).GetNotSeenAnimals), arg0, arg1)
}

// MarkAsSeen mocks base method.
func (m *MockAnimalStoreI) MarkAsSeen(arg0 uint, arg1 uuid.UUID, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAsSeen", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkAsSeen indicates an expected call of MarkAsSeen.
func (mr *MockAnimalStoreIMockRecorder) MarkAsSeen(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsSeen", reflect.TypeOf((*MockAnimalStoreI)(nil).MarkAsSeen), arg0, arg1, arg2)
}
