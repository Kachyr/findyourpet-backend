// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Kachyr/findyourpet/findyourpet-backend/internal/services (interfaces: AnimalServiceI)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/Kachyr/findyourpet/findyourpet-backend/pkg/models"
	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockAnimalServiceI is a mock of AnimalServiceI interface.
type MockAnimalServiceI struct {
	ctrl     *gomock.Controller
	recorder *MockAnimalServiceIMockRecorder
}

// MockAnimalServiceIMockRecorder is the mock recorder for MockAnimalServiceI.
type MockAnimalServiceIMockRecorder struct {
	mock *MockAnimalServiceI
}

// NewMockAnimalServiceI creates a new mock instance.
func NewMockAnimalServiceI(ctrl *gomock.Controller) *MockAnimalServiceI {
	mock := &MockAnimalServiceI{ctrl: ctrl}
	mock.recorder = &MockAnimalServiceIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnimalServiceI) EXPECT() *MockAnimalServiceIMockRecorder {
	return m.recorder
}

// AddAnimal mocks base method.
func (m *MockAnimalServiceI) AddAnimal(arg0 *models.AnimalJSON) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAnimal", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAnimal indicates an expected call of AddAnimal.
func (mr *MockAnimalServiceIMockRecorder) AddAnimal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAnimal", reflect.TypeOf((*MockAnimalServiceI)(nil).AddAnimal), arg0)
}

// GetAllAnimals mocks base method.
func (m *MockAnimalServiceI) GetAllAnimals(arg0 *gin.Context) ([]models.Animal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAnimals", arg0)
	ret0, _ := ret[0].([]models.Animal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAnimals indicates an expected call of GetAllAnimals.
func (mr *MockAnimalServiceIMockRecorder) GetAllAnimals(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAnimals", reflect.TypeOf((*MockAnimalServiceI)(nil).GetAllAnimals), arg0)
}

// GetAnimalById mocks base method.
func (m *MockAnimalServiceI) GetAnimalById(arg0 string) (models.Animal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimalById", arg0)
	ret0, _ := ret[0].(models.Animal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimalById indicates an expected call of GetAnimalById.
func (mr *MockAnimalServiceIMockRecorder) GetAnimalById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimalById", reflect.TypeOf((*MockAnimalServiceI)(nil).GetAnimalById), arg0)
}

// GetAnimals mocks base method.
func (m *MockAnimalServiceI) GetAnimals(arg0 uuid.UUID, arg1 *gin.Context) ([]models.Animal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimals", arg0, arg1)
	ret0, _ := ret[0].([]models.Animal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimals indicates an expected call of GetAnimals.
func (mr *MockAnimalServiceIMockRecorder) GetAnimals(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimals", reflect.TypeOf((*MockAnimalServiceI)(nil).GetAnimals), arg0, arg1)
}

// GetLikedAnimals mocks base method.
func (m *MockAnimalServiceI) GetLikedAnimals(arg0 uuid.UUID, arg1 *gin.Context) ([]models.Animal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLikedAnimals", arg0, arg1)
	ret0, _ := ret[0].([]models.Animal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLikedAnimals indicates an expected call of GetLikedAnimals.
func (mr *MockAnimalServiceIMockRecorder) GetLikedAnimals(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLikedAnimals", reflect.TypeOf((*MockAnimalServiceI)(nil).GetLikedAnimals), arg0, arg1)
}

// MarkAsSeen mocks base method.
func (m *MockAnimalServiceI) MarkAsSeen(arg0 string, arg1 uuid.UUID, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAsSeen", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkAsSeen indicates an expected call of MarkAsSeen.
func (mr *MockAnimalServiceIMockRecorder) MarkAsSeen(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsSeen", reflect.TypeOf((*MockAnimalServiceI)(nil).MarkAsSeen), arg0, arg1, arg2)
}
