// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Kachyr/findyourpet/findyourpet-backend/internal/store/users (interfaces: UserStoreI)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/Kachyr/findyourpet/findyourpet-backend/pkg/models"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockUserStoreI is a mock of UserStoreI interface.
type MockUserStoreI struct {
	ctrl     *gomock.Controller
	recorder *MockUserStoreIMockRecorder
}

// MockUserStoreIMockRecorder is the mock recorder for MockUserStoreI.
type MockUserStoreIMockRecorder struct {
	mock *MockUserStoreI
}

// NewMockUserStoreI creates a new mock instance.
func NewMockUserStoreI(ctrl *gomock.Controller) *MockUserStoreI {
	mock := &MockUserStoreI{ctrl: ctrl}
	mock.recorder = &MockUserStoreIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserStoreI) EXPECT() *MockUserStoreIMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserStoreI) Create(arg0 *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserStoreIMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserStoreI)(nil).Create), arg0)
}

// GetByEmail mocks base method.
func (m *MockUserStoreI) GetByEmail(arg0 string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", arg0)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockUserStoreIMockRecorder) GetByEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockUserStoreI)(nil).GetByEmail), arg0)
}

// GetByID mocks base method.
func (m *MockUserStoreI) GetByID(arg0 uuid.UUID) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUserStoreIMockRecorder) GetByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUserStoreI)(nil).GetByID), arg0)
}

// GetUserSettings mocks base method.
func (m *MockUserStoreI) GetUserSettings(arg0 uuid.UUID) (models.UserSettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSettings", arg0)
	ret0, _ := ret[0].(models.UserSettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSettings indicates an expected call of GetUserSettings.
func (mr *MockUserStoreIMockRecorder) GetUserSettings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSettings", reflect.TypeOf((*MockUserStoreI)(nil).GetUserSettings), arg0)
}

// SetUserSettings mocks base method.
func (m *MockUserStoreI) SetUserSettings(arg0 uuid.UUID, arg1 models.UserSettings) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserSettings", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUserSettings indicates an expected call of SetUserSettings.
func (mr *MockUserStoreIMockRecorder) SetUserSettings(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserSettings", reflect.TypeOf((*MockUserStoreI)(nil).SetUserSettings), arg0, arg1)
}
